CREATE TABLE public."document_types" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar NOT NULL,
    "abbr" varchar NOT NULL,
    "length_type" public."document_length_type" NOT NULL,
    "length" int2 NOT NULL,
    "char_type" public."document_char_type" NOT NULL,
    "created_at" timestamptz(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamptz(0) NULL,
    "deleted_at" timestamptz(0) NULL,
    UNIQUE NULLS NOT DISTINCT ("name", "deleted_at"),
    UNIQUE NULLS NOT DISTINCT ("abbr", "deleted_at")
);

COMMENT ON TABLE public."document_types"
IS 'Tabla que almacena los tipos de documentos utilizados para identificar personas o empresas.';

-- Tabla de rubros
CREATE TABLE public."business_categories" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar NOT NULL,
    "description" text NULL,
    "created_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "deleted_at" TIMESTAMPTZ(0) NULL,
    UNIQUE ("name")
);

COMMENT ON TABLE public."business_categories"
IS 'Tabla que almacena los rubros o categorías de negocio.';

CREATE TABLE public."persons" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "company_id" int4 NULL,
    "document_type_id" int4 NOT NULL,
    "document_number" varchar NOT NULL,
    "first_name" varchar NOT NULL,
    "middle_name" varchar NULL,
    "last_name_paternal" varchar NOT NULL,
    "last_name_maternal" varchar NULL,
    "gender" public."gender" NOT NULL,
    "email" varchar NOT NULL,
    "phone" varchar NULL,
    "created_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "deleted_at" TIMESTAMPTZ(0) NULL,
    UNIQUE NULLS NOT DISTINCT ("email", "deleted_at"),
    UNIQUE NULLS NOT DISTINCT ("company_id", "document_number", "deleted_at")
);

COMMENT ON TABLE public."persons"
IS 'Tabla que almacena la información de las personas.';

CREATE TABLE public."users" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "person_id" int4 NOT NULL,
    "username" varchar NOT NULL,
    "password" varchar NOT NULL, -- El password debe estar encriptado con argon2 y concatenado con el salt usando este formato: "argon2:{password}:{salt}"
    "avatar_url" varchar NULL,
    "is_verified" bool NOT NULL DEFAULT FALSE,
    "is_super_admin" bool NOT NULL DEFAULT FALSE,
    "last_login_at" timestamptz(0) NULL,
    "enabled" bool NOT NULL DEFAULT TRUE,
    "created_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "deleted_at" TIMESTAMPTZ(0) NULL,
    UNIQUE NULLS NOT DISTINCT ("username", "deleted_at"),
    UNIQUE NULLS NOT DISTINCT ("person_id", "deleted_at")
);

COMMENT ON TABLE public."users"
IS 'Tabla que almacena la información de los usuarios del sistema. Cada usuario está asociado a una persona.';

CREATE TABLE public."user_sessions" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" int4 NOT NULL,
    "token" varchar NOT NULL,
    "expires_at" timestamptz(0) NOT NULL,
    "closed_at" timestamptz(0) NULL,
    "ip" varchar NOT NULL, -- Información sensible que debe estar encriptada.
    "user_agent" varchar NOT NULL, -- Información sensible que debe estar encriptada.
    "last_activity_at" timestamptz(0) NULL,
    "metadata" jsonb NOT NULL DEFAULT JSONB_BUILD_OBJECT(),
    "created_at" timestamptz(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamptz(0) NULL,
    UNIQUE ("token")
);

COMMENT ON TABLE public."user_sessions"
IS 'Tabla que almacena las sesiones de usuario.';

CREATE TABLE public."companies" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "business_name" varchar NULL, -- Nombre comercial si aplica
    "entity_type" public."company_entity_type" NOT NULL,
    "document_type_id" int4 NOT NULL,
    "document_number" varchar NOT NULL, -- Número de identificación tributaria o equivalente
    "email" varchar NOT NULL,
    "phone" varchar NULL,
    "address" varchar NULL,
    "created_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "deleted_at" TIMESTAMPTZ(0) NULL,
    UNIQUE NULLS NOT DISTINCT ("email", "deleted_at"),
    UNIQUE NULLS NOT DISTINCT ("document_number", "deleted_at")
);

COMMENT ON TABLE public."companies"
IS 'Tabla que almacena la información de las empresas. Cada empresa puede ser una persona jurídica o una persona natural.';

-- Tabla de relación empresa-rubro (muchos a muchos)
CREATE TABLE public."companies_business_categories" (
    "id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "company_id" int4 NOT NULL,
    "business_category_id" int4,
    "created_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMPTZ(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "deleted_at" TIMESTAMPTZ(0) NULL,
    UNIQUE NULLS NOT DISTINCT ("company_id", "business_category_id", "deleted_at")
);

COMMENT ON TABLE public."companies_business_categories"
IS 'Tabla que almacena la relación entre empresas y rubros. Permite asociar múltiples rubros a una empresa y viceversa.';

-- RELATIONSHIPS

ALTER TABLE public."persons"
    ADD CONSTRAINT "persons_companies_fk" FOREIGN KEY ("company_id") REFERENCES public."companies" ("id"),
    ADD CONSTRAINT "persons_document_typesfkey" FOREIGN KEY ("document_type_id") REFERENCES public."document_types" ("id")
;

ALTER TABLE public."users"
    ADD CONSTRAINT "users_persons_fk" FOREIGN KEY ("person_id") REFERENCES public."persons" ("id")
;

ALTER TABLE public."user_sessions"
    ADD CONSTRAINT "user_sessions_users_fk" FOREIGN KEY ("user_id") REFERENCES public."users" ("id")
;

ALTER TABLE public."companies"
    ADD CONSTRAINT "companies_document_types_fk" FOREIGN KEY ("document_type_id") REFERENCES public."document_types" ("id")
;

ALTER TABLE public."companies_business_categories"
    ADD CONSTRAINT "companies_business_categories_companies_fk" FOREIGN KEY ("company_id") REFERENCES public."companies" ("id"),
    ADD CONSTRAINT "companies_business_categories_business_categories_fk" FOREIGN KEY ("business_category_id") REFERENCES public."business_categories" ("id")
;
